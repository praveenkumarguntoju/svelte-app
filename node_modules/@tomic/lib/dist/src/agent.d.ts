import { Client } from './client.js';

/**
 * An Agent is a user or machine that can write data to an Atomic Server. An
 * Agent *might* not have subject, sometimes. https://atomicdata.dev/classes/Agent
 */
export declare class Agent implements AgentInterface {
    privateKey: string;
    publicKey?: string;
    subject?: string;
    client: Client;
    constructor(privateKey: string, subject?: string);
    /**
     * Parses a base64 JSON object containing a privateKey and subject, and
     * constructs an Agent from that.
     */
    static fromSecret(secretB64: string): Agent;
    /** Returns public key or generates one using the private key */
    getPublicKey(): Promise<string>;
    /**
     * Returns a base64 encoded JSON object containing the Subject and the Private
     * Key. Used for signing in with one string
     */
    buildSecret(): string;
    /** Fetches the public key for the agent, checks if it matches with the current one */
    verifyPublicKeyWithServer(): Promise<void>;
}
/**
 * An Agent is a user or machine that can write data to an Atomic Server. An
 * Agent *might* not have subject, sometimes. https://atomicdata.dev/classes/Agent
 */
export interface AgentInterface {
    /** https://atomicdata.dev/properties/privateKey */
    privateKey: string;
    /** https://atomicdata.dev/properties/publicKey */
    publicKey?: string;
    /** URL of the Agent */
    subject?: string;
}
//# sourceMappingURL=agent.d.ts.map