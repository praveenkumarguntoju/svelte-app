import { Agent } from './agent.js';
import { HeadersObject } from './client.js';

/** Returns a JSON-AD resource of an Authentication */
export declare function createAuthentication(subject: string, agent: Agent): Promise<{
    'https://atomicdata.dev/properties/auth/agent': string;
    'https://atomicdata.dev/properties/auth/requestedSubject': string;
    'https://atomicdata.dev/properties/auth/publicKey': string;
    'https://atomicdata.dev/properties/auth/timestamp': number;
    'https://atomicdata.dev/properties/auth/signature': string;
}>;
/** Returns a string used to sign requests. */
export declare function signatureMessage(subject: string, agent: Agent, timestamp: number): Promise<string>;
/**
 * Creates authentication headers and signs the request. Does not add headers if
 * the Agents subject is missing.
 */
export declare function signRequest(
/** The resource meant to be fetched */
subject: string, agent: Agent, headers: HeadersObject | Headers): Promise<HeadersObject>;
/** Sets a cookie for the current Agent, signing the Authentication. It expires after some default time. */
export declare const setCookieAuthentication: (serverURL: string, agent: Agent) => void;
/** Returns false if the auth cookie is not set / expired */
export declare const checkAuthenticationCookie: () => boolean;
export declare const removeCookieAuthentication: () => void;
//# sourceMappingURL=authentication.d.ts.map