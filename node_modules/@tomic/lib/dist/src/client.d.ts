import { Agent, Commit } from './index.js';
import { Resource } from './resource.js';

/**
 * One key-value pair per HTTP Header. Since we need to support both browsers
 * and Node, we won't use the native Headers object here.
 */
export interface HeadersObject {
    [key: string]: string;
}
export type FileLike = {
    blob: Blob;
    name: string;
};
export type FileOrFileLike = File | FileLike;
interface FetchResourceOptions extends ParseOpts {
    /**
     * if the HTTP request needs to be signed by an agent, pass the agent here.
     */
    signInfo?: {
        agent: Agent;
        serverURL: string;
    };
    /**
     * Pass a server URL if you want to use the `/path` endpoint to indirectly
     * fetch through that server.
     */
    from?: string;
    method?: 'GET' | 'POST';
    /** The body is only used combined with the `POST` method */
    body?: ArrayBuffer | string;
}
export interface ParseOpts {
    /** Skips processing nested resources, even if they have an @id */
    noNested?: boolean;
}
/** Contains one or more Resources */
interface HTTPResourceResult {
    resource: Resource;
    createdResources: Resource[];
}
/** Contains a `fetch` instance, provides methods to GET and POST several types */
export declare class Client {
    private __fetchOverride?;
    constructor(fetchOverride?: typeof fetch);
    /** Throws an error if the subject is not valid */
    static tryValidSubject(subject: string | undefined): void;
    /** Returns true if the given subject is valid */
    static isValidSubject(subject: string | undefined): boolean;
    /**
     * Removes query params from the URL if it can build a URL. Will return the
     * normal URL if things go wrong.
     */
    static removeQueryParamsFromURL(subject: string): string;
    setFetch(fetchOverride: typeof fetch): void;
    /**
     * Fetches and Parses a Resource. Can fetch through another atomic server if you
     * pass the `from` argument, which should be the baseURL of an Atomic Server.
     * Returns a tuple of the requested resource and a list of all resources found in the response.
     */
    fetchResourceHTTP(subject: string, opts?: FetchResourceOptions): Promise<HTTPResourceResult>;
    /** Posts a Commit to some endpoint. Returns the Commit created by the server. */
    postCommit(commit: Commit, 
    /** URL to post to, e.g. https://atomicdata.dev/commit */
    endpoint: string): Promise<Commit>;
    /**
     * Uploads files to the `/upload` endpoint of the Store. Signs the Headers using
     * the given agent.
     * Returns the newly created resources
     */
    uploadFiles(files: FileOrFileLike[], serverUrl: string, agent: Agent, parent: string): Promise<Resource[]>;
    private fetch;
}
export {};
//# sourceMappingURL=client.d.ts.map