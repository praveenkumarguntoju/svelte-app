import { BaseProps } from '../index.js';

export declare const collections: {
    readonly classes: {
        readonly collection: "https://atomicdata.dev/classes/Collection";
    };
    readonly properties: {
        readonly members: "https://atomicdata.dev/properties/collection/members";
        readonly currentPage: "https://atomicdata.dev/properties/collection/currentPage";
        readonly pageSize: "https://atomicdata.dev/properties/collection/pageSize";
        readonly property: "https://atomicdata.dev/properties/collection/property";
        readonly totalMembers: "https://atomicdata.dev/properties/collection/totalMembers";
        readonly totalPages: "https://atomicdata.dev/properties/collection/totalPages";
        readonly value: "https://atomicdata.dev/properties/collection/value";
        readonly sortBy: "https://atomicdata.dev/properties/collection/sortBy";
        readonly sortDesc: "https://atomicdata.dev/properties/collection/sortDesc";
        readonly includeExternal: "https://atomicdata.dev/properties/collection/includeExternal";
    };
};
export declare namespace Collections {
    type Collection = typeof collections.classes.collection;
}
declare module '../index.js' {
    interface Classes {
        [collections.classes.collection]: {
            requires: BaseProps;
            recommends: 'https://atomicdata.dev/properties/name' | 'https://atomicdata.dev/properties/description' | typeof collections.properties.currentPage | typeof collections.properties.members | typeof collections.properties.pageSize | typeof collections.properties.property | typeof collections.properties.sortBy | typeof collections.properties.sortDesc | typeof collections.properties.totalMembers | typeof collections.properties.totalPages | typeof collections.properties.value | typeof collections.properties.includeExternal | 'https://atomicdata.dev/properties/incomplete';
        };
    }
    interface PropTypeMapping {
        [collections.properties.members]: string[];
        [collections.properties.currentPage]: number;
        [collections.properties.pageSize]: number;
        [collections.properties.property]: string;
        [collections.properties.totalMembers]: number;
        [collections.properties.totalPages]: number;
        [collections.properties.value]: string;
        [collections.properties.sortBy]: string;
        [collections.properties.sortDesc]: boolean;
        [collections.properties.includeExternal]: boolean;
    }
    interface PropSubjectToNameMapping {
        [collections.properties.members]: 'members';
        [collections.properties.currentPage]: 'currentPage';
        [collections.properties.pageSize]: 'pageSize';
        [collections.properties.property]: 'property';
        [collections.properties.totalMembers]: 'totalMembers';
        [collections.properties.totalPages]: 'totalPages';
        [collections.properties.value]: 'value';
        [collections.properties.sortBy]: 'sortBy';
        [collections.properties.sortDesc]: 'sortDesc';
        [collections.properties.includeExternal]: 'includeExternal';
    }
}
//# sourceMappingURL=collections.d.ts.map