import { BaseProps } from '../index.js';

export declare const server: {
    readonly classes: {
        readonly error: "https://atomicdata.dev/classes/Error";
        readonly endpoint: "https://atomicdata.dev/classes/Endpoint";
        readonly drive: "https://atomicdata.dev/classes/Drive";
        readonly redirect: "https://atomicdata.dev/classes/Redirect";
        readonly file: "https://atomicdata.dev/classes/File";
        readonly invite: "https://atomicdata.dev/classes/Invite";
        readonly endpointResponse: "https://atomicdata.dev/ontology/server/class/endpoint-response";
    };
    readonly properties: {
        readonly drives: "https://atomicdata.dev/properties/drives";
        readonly results: "https://atomicdata.dev/properties/endpoint/results";
        readonly property: "https://atomicdata.dev/properties/search/property";
        readonly redirectAgent: "https://atomicdata.dev/properties/invite/redirectAgent";
        readonly agent: "https://atomicdata.dev/properties/invite/agent";
        readonly publicKey: "https://atomicdata.dev/properties/invite/publicKey";
        readonly target: "https://atomicdata.dev/properties/invite/target";
        readonly usagesLeft: "https://atomicdata.dev/properties/invite/usagesLeft";
        readonly users: "https://atomicdata.dev/properties/invite/users";
        readonly write: "https://atomicdata.dev/properties/invite/write";
        readonly filename: "https://atomicdata.dev/properties/filename";
        readonly filesize: "https://atomicdata.dev/properties/filesize";
        readonly downloadUrl: "https://atomicdata.dev/properties/downloadURL";
        readonly mimetype: "https://atomicdata.dev/properties/mimetype";
        readonly attachments: "https://atomicdata.dev/properties/attachments";
        readonly createdBy: "https://atomicdata.dev/properties/createdBy";
        readonly checksum: "https://atomicdata.dev/properties/checksum";
        readonly internalId: "https://atomicdata.dev/properties/internalId";
        readonly children: "https://atomicdata.dev/properties/children";
        readonly parameters: "https://atomicdata.dev/properties/endpoint/parameters";
        readonly destination: "https://atomicdata.dev/properties/destination";
        readonly status: "https://atomicdata.dev/ontology/server/property/status";
        readonly responseMessage: "https://atomicdata.dev/ontology/server/property/response-message";
        readonly defaultOntology: "https://atomicdata.dev/ontology/server/property/default-ontology";
        readonly imageWidth: "https://atomicdata.dev/properties/imageWidth";
        readonly imageHeight: "https://atomicdata.dev/properties/imageHeight";
    };
};
export declare namespace Server {
    type Error = typeof server.classes.error;
    type Endpoint = typeof server.classes.endpoint;
    type Drive = typeof server.classes.drive;
    type Redirect = typeof server.classes.redirect;
    type File = typeof server.classes.file;
    type Invite = typeof server.classes.invite;
    type EndpointResponse = typeof server.classes.endpointResponse;
}
declare module '../index.js' {
    interface Classes {
        [server.classes.error]: {
            requires: BaseProps | 'https://atomicdata.dev/properties/description';
            recommends: never;
        };
        [server.classes.endpoint]: {
            requires: BaseProps | 'https://atomicdata.dev/properties/description' | typeof server.properties.parameters;
            recommends: never;
        };
        [server.classes.drive]: {
            requires: BaseProps;
            recommends: 'https://atomicdata.dev/properties/read' | typeof server.properties.children | 'https://atomicdata.dev/properties/description' | 'https://atomicdata.dev/properties/subresources' | 'https://atomicdata.dev/properties/write' | typeof server.properties.defaultOntology;
        };
        [server.classes.redirect]: {
            requires: BaseProps | typeof server.properties.destination;
            recommends: typeof server.properties.redirectAgent;
        };
        [server.classes.file]: {
            requires: BaseProps | typeof server.properties.downloadUrl;
            recommends: 'https://atomicdata.dev/properties/description' | typeof server.properties.filesize | typeof server.properties.filename | typeof server.properties.checksum | typeof server.properties.mimetype | typeof server.properties.internalId | typeof server.properties.imageWidth | typeof server.properties.imageHeight;
        };
        [server.classes.invite]: {
            requires: BaseProps | typeof server.properties.target;
            recommends: typeof server.properties.write | typeof server.properties.createdBy | typeof server.properties.users | typeof server.properties.usagesLeft;
        };
        [server.classes.endpointResponse]: {
            requires: BaseProps | typeof server.properties.status | typeof server.properties.responseMessage;
            recommends: never;
        };
    }
    interface PropTypeMapping {
        [server.properties.drives]: string[];
        [server.properties.results]: string[];
        [server.properties.property]: string;
        [server.properties.redirectAgent]: string;
        [server.properties.agent]: string;
        [server.properties.publicKey]: string;
        [server.properties.target]: string;
        [server.properties.usagesLeft]: number;
        [server.properties.users]: string[];
        [server.properties.write]: boolean;
        [server.properties.filename]: string;
        [server.properties.filesize]: number;
        [server.properties.downloadUrl]: string;
        [server.properties.mimetype]: string;
        [server.properties.attachments]: string[];
        [server.properties.createdBy]: string;
        [server.properties.checksum]: string;
        [server.properties.internalId]: string;
        [server.properties.children]: string[];
        [server.properties.parameters]: string[];
        [server.properties.destination]: string;
        [server.properties.status]: number;
        [server.properties.responseMessage]: string;
        [server.properties.defaultOntology]: string;
        [server.properties.imageWidth]: number;
        [server.properties.imageHeight]: number;
    }
    interface PropSubjectToNameMapping {
        [server.properties.drives]: 'drives';
        [server.properties.results]: 'results';
        [server.properties.property]: 'property';
        [server.properties.redirectAgent]: 'redirectAgent';
        [server.properties.agent]: 'agent';
        [server.properties.publicKey]: 'publicKey';
        [server.properties.target]: 'target';
        [server.properties.usagesLeft]: 'usagesLeft';
        [server.properties.users]: 'users';
        [server.properties.write]: 'write';
        [server.properties.filename]: 'filename';
        [server.properties.filesize]: 'filesize';
        [server.properties.downloadUrl]: 'downloadUrl';
        [server.properties.mimetype]: 'mimetype';
        [server.properties.attachments]: 'attachments';
        [server.properties.createdBy]: 'createdBy';
        [server.properties.checksum]: 'checksum';
        [server.properties.internalId]: 'internalId';
        [server.properties.children]: 'children';
        [server.properties.parameters]: 'parameters';
        [server.properties.destination]: 'destination';
        [server.properties.status]: 'status';
        [server.properties.responseMessage]: 'responseMessage';
        [server.properties.defaultOntology]: 'defaultOntology';
        [server.properties.imageWidth]: 'imageWidth';
        [server.properties.imageHeight]: 'imageHeight';
    }
}
//# sourceMappingURL=server.d.ts.map