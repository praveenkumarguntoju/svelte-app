import { Store } from './store.js';

export interface QueryFilter {
    property?: string;
    value?: string;
    sort_by?: string;
    sort_desc?: boolean;
}
export interface CollectionParams extends QueryFilter {
    page_size: string;
}
export interface CollectionOptions {
    noFetch?: boolean;
    endpoint?: string;
}
/**
 * A collection is a dynamic resource that queries the server for a list of resources that meet it's criteria.
 * Checkout [the docs](https://docs.atomicdata.dev/schema/collections.html) for more information.
 *
 * Keep in mind that the collection does currently not subscribe to changes in the store and will therefore not update if items are added or removed.
 * Use the `invalidate` method to force a refresh.
 */
export declare class Collection {
    readonly __internalObject: this;
    private store;
    private pages;
    private server;
    private params;
    private _totalMembers;
    private _waitForReady;
    constructor(store: Store, server: string, params: CollectionParams, noFetch?: boolean);
    get property(): string | undefined;
    get value(): string | undefined;
    get sortBy(): string | undefined;
    get sortDesc(): boolean;
    get pageSize(): number;
    get totalMembers(): number;
    get totalPages(): number;
    waitForReady(): Promise<void>;
    getMemberWithIndex(index: number): Promise<string | undefined>;
    clearPages(): void;
    refresh(): Promise<void>;
    clone(): Collection;
    [Symbol.asyncIterator](): AsyncGenerator<string, void, unknown>;
    getAllMembers(): Promise<string[]>;
    getMembersOnPage(page: number): Promise<string[]>;
    private buildSubject;
    private fetchPage;
}
export declare function proxyCollection(collection: Collection): Collection;
//# sourceMappingURL=collection.d.ts.map