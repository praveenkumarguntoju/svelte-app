import { JSONValue } from './value.js';

export declare enum Datatype {
    /** A Resource - either a URL string or a Nested Resource */
    ATOMIC_URL = "https://atomicdata.dev/datatypes/atomicURL",
    /** True / false */
    BOOLEAN = "https://atomicdata.dev/datatypes/boolean",
    /** ISO date YYYY-MM-DD */
    DATE = "https://atomicdata.dev/datatypes/date",
    /** Floating point number (number with comma) */
    FLOAT = "https://atomicdata.dev/datatypes/float",
    INTEGER = "https://atomicdata.dev/datatypes/integer",
    /** UTF-8 Markdown string */
    MARKDOWN = "https://atomicdata.dev/datatypes/markdown",
    /** Array of Resources and */
    RESOURCEARRAY = "https://atomicdata.dev/datatypes/resourceArray",
    /** String with only letters, numbers and dashes in between */
    SLUG = "https://atomicdata.dev/datatypes/slug",
    STRING = "https://atomicdata.dev/datatypes/string",
    /** Milliseconds since unix epoch */
    TIMESTAMP = "https://atomicdata.dev/datatypes/timestamp",
    UNKNOWN = "unknown-datatype"
}
/** Convert a URL to a Datatype */
export declare const datatypeFromUrl: (url: string) => Datatype;
export interface ArrayError extends Error {
    index?: number;
}
/** Validates a JSON Value using a Datatype. Throws an error if things are wrong. */
export declare const validateDatatype: (value: JSONValue, datatype: Datatype) => void;
export declare function isArray(val: JSONValue): val is [];
export declare function isString(val: JSONValue): val is string;
export declare function isNumber(val: JSONValue): val is number;
export declare const reverseDatatypeMapping: {
    "https://atomicdata.dev/datatypes/string": string;
    "https://atomicdata.dev/datatypes/slug": string;
    "https://atomicdata.dev/datatypes/markdown": string;
    "https://atomicdata.dev/datatypes/integer": string;
    "https://atomicdata.dev/datatypes/float": string;
    "https://atomicdata.dev/datatypes/boolean": string;
    "https://atomicdata.dev/datatypes/date": string;
    "https://atomicdata.dev/datatypes/timestamp": string;
    "https://atomicdata.dev/datatypes/atomicURL": string;
    "https://atomicdata.dev/datatypes/resourceArray": string;
    "unknown-datatype": string;
};
//# sourceMappingURL=datatypes.d.ts.map