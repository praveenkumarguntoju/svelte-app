type Handlers<Types extends string> = {
    [key in Types]: (...args: any[]) => any;
};
/** Event manger, used to manage events and dispatch events to the correct handlers. */
export declare class EventManager<Types extends string, H extends Handlers<Types>> {
    private subscriptions;
    register<T extends Types>(event: T, handler: H[T]): () => void;
    emit<T extends Types>(event: T, ...args: Parameters<H[T]>): Promise<void>;
    hasSubscriptions<T extends Types>(event: T): boolean;
}
export {};
//# sourceMappingURL=EventManager.d.ts.map