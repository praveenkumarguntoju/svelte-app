import { JSONValue } from './value.js';

export type BaseObject = {
    classes: Record<string, string>;
    properties: Record<string, string>;
};
export interface Classes {
    'unknown-subject': {
        requires: BaseProps;
        recommends: never;
    };
}
export type UnknownClass = 'unknown-subject';
export type BaseProps = 'https://atomicdata.dev/properties/isA' | 'https://atomicdata.dev/properties/parent';
export interface PropTypeMapping {
}
export interface PropSubjectToNameMapping {
}
export type Requires<C extends keyof Classes> = Classes[C]['requires'];
export type Recommends<C extends keyof Classes> = Classes[C]['recommends'];
type PropsOfClass<C extends keyof Classes> = {
    [P in Requires<C>]: P;
} & {
    [P in Recommends<C>]?: P;
};
/**
 * Infers the js type a value can have on a resource for the given property.
 * If the property is not known in any ontology, it will return JSONValue.
 */
export type InferTypeOfValueInTriple<Class extends keyof Classes | never = never, Prop = string, Returns = Prop extends keyof PropTypeMapping ? Prop extends Requires<Class> ? PropTypeMapping[Prop] : PropTypeMapping[Prop] | undefined : JSONValue> = Returns;
type QuickAccesKnownPropType<Class extends OptionalClass> = {
    readonly [Prop in keyof PropsOfClass<Class> as PropSubjectToNameMapping[Prop]]: InferTypeOfValueInTriple<Class, Prop>;
};
/** Type of the dynamically created resource.props field */
export type QuickAccesPropType<Class extends OptionalClass = UnknownClass> = Class extends UnknownClass ? any : QuickAccesKnownPropType<Class>;
export type OptionalClass = keyof Classes | UnknownClass;
/** Let atomic lib know your custom ontologies exist */
export declare function registerOntologies(...ontologies: BaseObject[]): void;
export declare function getKnownNameBySubject(subject: string): string | undefined;
export declare function __INTERNAL_GET_KNOWN_SUBJECT_MAPPING(): Map<string, string>;
export {};
//# sourceMappingURL=ontology.d.ts.map