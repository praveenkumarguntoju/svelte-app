/**
 * @deprecated These have been move to their respective onotlogies e.g. core, server, collections, etc.
 */
export declare const classes: {
    agent: string;
    chatRoom: string;
    collection: string;
    commit: string;
    class: string;
    document: string;
    bookmark: string;
    elements: {
        paragraph: string;
    };
    error: string;
    property: string;
    datatype: string;
    endpoint: string;
    drive: string;
    redirect: string;
    invite: string;
    file: string;
    message: string;
    importer: string;
    folder: string;
    article: string;
    displayStyle: string;
    displayStyles: {
        grid: string;
        list: string;
    };
    dateFormat: string;
    numberFormat: string;
    constraintProperties: {
        rangeProperty: string;
        floatRangeProperty: string;
        formattedNumber: string;
        selectProperty: string;
        formattedDate: string;
    };
    table: string;
    tag: string;
    ontology: string;
};
/**
 *  @deprecated These have been move to their respective onotlogies e.g. core, server, collections, etc.
 */
export declare const properties: {
    /** Collection of all the AtomicData.dev properties */
    allowsOnly: string;
    getAll: string;
    children: string;
    classType: string;
    createdBy: string;
    datatype: string;
    description: string;
    drives: string;
    incomplete: string;
    isA: string;
    isDynamic: string;
    name: string;
    parent: string;
    paymentPointer: string;
    read: string;
    recommends: string;
    requires: string;
    shortname: string;
    subResources: string;
    write: string;
    displayStyle: string;
    publishedAt: string;
    agent: {
        publicKey: string;
    };
    collection: {
        members: string;
        currentPage: string;
        pageSize: string;
        property: string;
        totalMembers: string;
        totalPages: string;
        value: string;
    };
    commit: {
        subject: string;
        createdAt: string;
        lastCommit: string;
        previousCommit: string;
        signer: string;
        set: string;
        push: string;
        remove: string;
        destroy: string;
        signature: string;
    };
    document: {
        elements: string;
    };
    endpoint: {
        parameters: string;
        results: string;
    };
    search: {
        query: string;
        limit: string;
        property: string;
    };
    redirect: {
        destination: string;
        redirectAgent: string;
    };
    invite: {
        agent: string;
        publicKey: string;
        target: string;
        usagesLeft: string;
        users: string;
        write: string;
    };
    file: {
        filename: string;
        filesize: string;
        downloadUrl: string;
        mimetype: string;
        attachments: string;
    };
    chatRoom: {
        messages: string;
        nextPage: string;
        replyTo: string;
    };
    bookmark: {
        url: string;
        preview: string;
        imageUrl: string;
    };
    constraints: {
        max: string;
        min: string;
        maxFloat: string;
        minFloat: string;
        numberFormatting: string;
        decimalPlaces: string;
        dateFormat: string;
    };
    table: {
        tableColumnWidths: string;
    };
    ontology: {
        customNodePositioning: string;
    };
    color: string;
    emoji: string;
    classes: string;
    properties: string;
    instances: string;
};
export declare const datatypes: {
    atomicUrl: string;
    boolean: string;
    date: string;
    float: string;
    integer: string;
    markdown: string;
    resourceArray: string;
    slug: string;
    string: string;
    timestamp: string;
};
export declare const instances: {
    publicAgent: string;
    displayStyleGrid: string;
    numberFormats: {
        number: string;
        percentage: string;
        currency: string;
    };
    dateFormats: {
        localNumeric: string;
        localLong: string;
        localRelative: string;
    };
};
export declare const endpoints: {
    import: string;
};
/**
 * @deprecated These have been move to their respective onotlogies e.g. core, server, collections, etc.
 */
export declare const urls: {
    properties: {
        /** Collection of all the AtomicData.dev properties */
        allowsOnly: string;
        getAll: string;
        children: string;
        classType: string;
        createdBy: string;
        datatype: string;
        description: string;
        drives: string;
        incomplete: string;
        isA: string;
        isDynamic: string;
        name: string;
        parent: string;
        paymentPointer: string;
        read: string;
        recommends: string;
        requires: string;
        shortname: string;
        subResources: string;
        write: string;
        displayStyle: string;
        publishedAt: string;
        agent: {
            publicKey: string;
        };
        collection: {
            members: string;
            currentPage: string;
            pageSize: string;
            property: string;
            totalMembers: string;
            totalPages: string;
            value: string;
        };
        commit: {
            subject: string;
            createdAt: string;
            lastCommit: string;
            previousCommit: string;
            signer: string;
            set: string;
            push: string;
            remove: string;
            destroy: string;
            signature: string;
        };
        document: {
            elements: string;
        };
        endpoint: {
            parameters: string;
            results: string;
        };
        search: {
            query: string;
            limit: string;
            property: string;
        };
        redirect: {
            destination: string;
            redirectAgent: string;
        };
        invite: {
            agent: string;
            publicKey: string;
            target: string;
            usagesLeft: string;
            users: string;
            write: string;
        };
        file: {
            filename: string;
            filesize: string;
            downloadUrl: string;
            mimetype: string;
            attachments: string;
        };
        chatRoom: {
            messages: string;
            nextPage: string;
            replyTo: string;
        };
        bookmark: {
            url: string;
            preview: string;
            imageUrl: string;
        };
        constraints: {
            max: string;
            min: string;
            maxFloat: string;
            minFloat: string;
            numberFormatting: string;
            decimalPlaces: string;
            dateFormat: string;
        };
        table: {
            tableColumnWidths: string;
        };
        ontology: {
            customNodePositioning: string;
        };
        color: string;
        emoji: string;
        classes: string;
        properties: string;
        instances: string;
    };
    endpoints: {
        import: string;
    };
    classes: {
        agent: string;
        chatRoom: string;
        collection: string;
        commit: string;
        class: string;
        document: string;
        bookmark: string;
        elements: {
            paragraph: string;
        };
        error: string;
        property: string;
        datatype: string;
        endpoint: string;
        drive: string;
        redirect: string;
        invite: string;
        file: string;
        message: string;
        importer: string;
        folder: string;
        article: string;
        displayStyle: string;
        displayStyles: {
            grid: string;
            list: string;
        };
        dateFormat: string;
        numberFormat: string;
        constraintProperties: {
            rangeProperty: string;
            floatRangeProperty: string;
            formattedNumber: string;
            selectProperty: string;
            formattedDate: string;
        };
        table: string;
        tag: string;
        ontology: string;
    };
    datatypes: {
        atomicUrl: string;
        boolean: string;
        date: string;
        float: string;
        integer: string;
        markdown: string;
        resourceArray: string;
        slug: string;
        string: string;
        timestamp: string;
    };
    instances: {
        publicAgent: string;
        displayStyleGrid: string;
        numberFormats: {
            number: string;
            percentage: string;
            currency: string;
        };
        dateFormats: {
            localNumeric: string;
            localLong: string;
            localRelative: string;
        };
    };
};
//# sourceMappingURL=urls.d.ts.map