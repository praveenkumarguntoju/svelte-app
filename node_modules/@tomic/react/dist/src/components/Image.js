var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { unknownSubject, server } from '@tomic/lib';
import React from 'react';
import { useResource, useString } from '../index.js';
var imageFormatsWithBasicSupport = new Set([
    'image/svg+xml',
    'image/vnd.adobe.photoshop',
    'image/heif',
    'image/heif-sequence',
    'image/heic-sequence',
    'image/avif-sequence',
    'image/gif',
    'image/heic',
    'image/heif',
]);
var imageFormatsWithFullSupport = new Set([
    'image/png',
    'image/jpeg',
    'image/vnd.microsoft.icon',
    'image/webp',
    'image/bmp',
    'image/tiff',
    'image/avif',
]);
var DEFAULT_SIZES = [100, 300, 500, 800, 1200, 1600, 2000];
/**
 * Takes the subject of a file resource and renders it as an image.
 * Uses AtomicServer to automatically generate avif and webp versions of the image and scale them to different sizes.
 * To help the browser choose the best size to load use the `sizeIndication` prop.
 *
 * Throws when the file is not an image.
 * @example
 * ```jsx
 * <Image
 *  subject='http://myatomicserver.com/files/1664878581079-hiker.jpg'
 *  alt='a person standing in front of a mountain'
 *  className='article-inline-image'
 *  loading='lazy'
 *  sizeIndication={{
 *    '500px': 100, // On screens smaller than 500px the image is displayed at full width.
 *    default: 50, // the image is about 50% of the viewport when no media query matches
 *  }}
 * />
 * ```
 */
export var Image = function (_a) {
    var subject = _a.subject, props = __rest(_a, ["subject"]);
    var resource = useResource(subject);
    var _b = __read(useString(resource, server.properties.mimetype), 1), mimeType = _b[0];
    if (resource.loading || resource.subject === unknownSubject) {
        return null;
    }
    if (!resource.hasClasses(server.classes.file)) {
        throw new Error('Incompatible resource class, resource is not a file');
    }
    // If the resource does have a file class but mimetype is still undefined, it's still loading so we return null until the value is available
    if (mimeType === undefined) {
        return null;
    }
    if (imageFormatsWithBasicSupport.has(mimeType)) {
        return React.createElement(BasicImage, __assign({ resource: resource }, props));
    }
    if (!imageFormatsWithFullSupport.has(mimeType)) {
        throw new Error('Incompatible or missing mime-type: ' + mimeType);
    }
    return React.createElement(ImageInner, __assign({ resource: resource }, props));
};
var ImageInner = function (_a) {
    var resource = _a.resource, sizeIndication = _a.sizeIndication, _b = _a.quality, quality = _b === void 0 ? 60 : _b, props = __rest(_a, ["resource", "sizeIndication", "quality"]);
    var _c = __read(useString(resource, server.properties.downloadUrl), 1), downloadUrl = _c[0];
    var toSrcSet = buildSrcSet(downloadUrl !== null && downloadUrl !== void 0 ? downloadUrl : '');
    return (React.createElement("picture", null,
        React.createElement("source", { srcSet: toSrcSet('avif', quality, DEFAULT_SIZES), type: 'image/avif', sizes: indicationToSizes(sizeIndication), height: resource.props.imageHeight, width: resource.props.imageWidth }),
        React.createElement("source", { srcSet: toSrcSet('webp', quality, DEFAULT_SIZES), type: 'image/webp', sizes: indicationToSizes(sizeIndication), height: resource.props.imageHeight, width: resource.props.imageWidth }),
        React.createElement("img", __assign({ src: downloadUrl }, props, { height: resource.props.imageHeight, width: resource.props.imageWidth }))));
};
var BasicImage = function (_a) {
    var resource = _a.resource, _sizeIndication = _a.sizeIndication, _quality = _a.quality, props = __rest(_a, ["resource", "sizeIndication", "quality"]) // html image atrributes only
    ;
    var _b = __read(useString(resource, server.properties.downloadUrl), 1), downloadUrl = _b[0];
    // eslint-disable-next-line jsx-a11y/alt-text
    return React.createElement("img", __assign({ src: downloadUrl }, props));
};
var indicationToSizes = function (indication) {
    if (indication === undefined) {
        return '100vw';
    }
    if (typeof indication === 'number' || typeof indication === 'string') {
        return parseUnit(indication);
    }
    return Object.entries(indication)
        .map(function (_a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        return key === 'default'
            ? parseUnit(value)
            : "(max-width: ".concat(key, ") ").concat(parseUnit(value));
    })
        .join(', ');
};
var parseUnit = function (unit) {
    return typeof unit === 'number' ? "".concat(unit, "vw") : unit;
};
var toUrl = function (base, format, quality, width) {
    var url = new URL(base);
    var queryParams = new URLSearchParams();
    format && queryParams.set('f', format);
    width && queryParams.set('w', width.toString());
    quality && queryParams.set('q', quality.toString());
    url.search = queryParams.toString();
    return url.toString();
};
var buildSrcSet = function (base) {
    return function (format, quality, sizes) {
        return sizes
            .map(function (size) {
            return "".concat(toUrl(base, format, quality, size), " ").concat(size, "w");
        })
            .join(', ');
    };
};
//# sourceMappingURL=Image.js.map