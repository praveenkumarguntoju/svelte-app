var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { unknownSubject, } from '@tomic/lib';
import { useEffect, useState } from 'react';
import { useResource } from './hooks.js';
/**
 * Gets a member from a collection by index. Handles pagination for you.
 */
export function useMemberFromCollection(collection, index) {
    var _a = __read(useState(unknownSubject), 2), subject = _a[0], setSubject = _a[1];
    var resource = useResource(subject);
    useEffect(function () {
        collection.getMemberWithIndex(index).then(function (s) { return s && setSubject(s); });
    }, [collection, index]);
    return resource;
}
//# sourceMappingURL=useMemberFromCollection.js.map