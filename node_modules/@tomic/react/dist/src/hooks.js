var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { useState, useEffect, useCallback, useMemo, useRef, useContext, createContext, } from 'react';
import { Store, Datatype, datatypeFromUrl, urls, truncateUrl, valToBoolean, valToNumber, valToDate, valToArray, valToString, unknownSubject, proxyResource, ResourceEvents, } from '@tomic/lib';
import { useDebouncedCallback } from './index.js';
/**
 * Hook for getting a Resource in a React component. Will try to fetch the
 * subject and add its parsed values to the store.
 */
export function useResource(subject, opts) {
    if (subject === void 0) { subject = unknownSubject; }
    var store = useStore();
    var _a = __read(useState(function () {
        return store.getResourceLoading(subject, opts);
    }), 2), resource = _a[0], setResource = _a[1];
    // If the subject changes, make sure to change the resource!
    // When a component mounts, it needs to let the store know that it will subscribe to changes to that resource.
    useEffect(function () {
        setResource(proxyResource(store.getResourceLoading(subject, opts)));
        return store.subscribe(subject, function (updated) {
            setResource(proxyResource(updated));
        });
    }, [store, subject]);
    return resource;
}
var stableEmptyArray = [];
/**
 * Converts an array of Atomic URL strings to an array of Resources.
 * !! Make sure the array is stable by memoizing it !!
 */
export function useResources(subjects, opts) {
    if (subjects === void 0) { subjects = stableEmptyArray; }
    if (opts === void 0) { opts = {}; }
    var _a = __read(useState(new Map()), 2), resources = _a[0], setResources = _a[1];
    var store = useStore();
    useEffect(function () {
        // When a change happens, set the new Resource.
        function handleNotify(updated) {
            setResources(function (prev) {
                prev.set(updated.getSubject(), proxyResource(updated));
                // We need to create new Maps for react hooks to update - React only checks references, not content
                return new Map(prev);
            });
        }
        setResources(function (prev) {
            var e_1, _a;
            try {
                for (var subjects_1 = __values(subjects), subjects_1_1 = subjects_1.next(); !subjects_1_1.done; subjects_1_1 = subjects_1.next()) {
                    var subject = subjects_1_1.value;
                    var resource = store.getResourceLoading(subject, opts);
                    prev.set(subject, proxyResource(resource));
                    // Let the store know to call handleNotify when a resource is updated.
                    store.subscribe(subject, handleNotify);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (subjects_1_1 && !subjects_1_1.done && (_a = subjects_1.return)) _a.call(subjects_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return new Map(prev);
        });
        return function () {
            var e_2, _a;
            try {
                // When the component is unmounted, unsubscribe from the store.
                for (var subjects_2 = __values(subjects), subjects_2_1 = subjects_2.next(); !subjects_2_1.done; subjects_2_1 = subjects_2.next()) {
                    var subject = subjects_2_1.value;
                    store.unsubscribe(subject, handleNotify);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (subjects_2_1 && !subjects_2_1.done && (_a = subjects_2.return)) _a.call(subjects_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
        };
        // maybe add resources here
    }, [subjects, store]);
    return resources;
}
/**
 * Hook for using a Property. Will return `undefined` if the Property is not yet
 * loaded, and add Error strings to shortname and description if something goes wrong.
 */
export function useProperty(subject) {
    var resource = useResource(subject);
    var property = useMemo(function () {
        if (resource.loading) {
            return {
                subject: subject,
                datatype: Datatype.UNKNOWN,
                shortname: 'loading',
                description: "Loading property ".concat(subject),
                loading: true,
            };
        }
        if (resource.error) {
            return {
                subject: subject,
                datatype: Datatype.UNKNOWN,
                shortname: 'error',
                description: 'Error getting Property. ' + resource.error.message,
                error: resource.error,
            };
        }
        return {
            subject: subject,
            datatype: datatypeFromUrl(resource.props.datatype),
            shortname: resource.props.shortname,
            description: resource.props.description,
            classType: resource.props.classtype,
            isDynamic: !!resource.props.isDynamic,
            allowsOnly: resource.props.allowsOnly,
        };
    }, [resource]);
    return property;
}
/**
 * Similar to React's `useState` hook. Returns a Value and a Setter as an array
 * of two items. Value will be `undefined` if the Resource isn't loaded yet. The
 * generated Setter function can be called to set the value. Be sure to look at
 * the various options for useValueOptions (debounce, commits, error handling).
 *
 * ```typescript
 * // Simple usage:
 * const resource = useResource('https://atomicdata.dev/classes/Agent');
 * const [shortname, setShortname] = useValue(
 *   resource,
 *   'https://atomicdata.dev/properties/shortname',
 * );
 * ```
 *
 * ```typescript
 * // With options:
 * const resource = useResource('https://atomicdata.dev/classes/Agent');
 * const [error, setError] = useState(null);
 * const [shortname, setShortname] = useValue(
 *   resource,
 *   'https://atomicdata.dev/properties/shortname',
 *   {
 *     commit: true,
 *     validate: true,
 *     commitDebounce: 500,
 *     handleValidationError: setError,
 *   },
 * );
 * ```
 */
export function useValue(resource, propertyURL, opts) {
    var _this = this;
    if (opts === void 0) { opts = {}; }
    var _a = opts.commit, commit = _a === void 0 ? false : _a, _b = opts.validate, validate = _b === void 0 ? true : _b, _c = opts.commitDebounce, commitDebounce = _c === void 0 ? 100 : _c, handleValidationError = opts.handleValidationError;
    var _d = __read(useState(resource.get(propertyURL)), 2), val = _d[0], set = _d[1];
    var _e = __read(useState(resource), 2), prevResourceReference = _e[0], setPrevResourceReference = _e[1];
    var store = useStore();
    var _f = __read(useDebouncedCallback(function () {
        if (!commit) {
            return;
        }
        resource.save().catch(function (e) { return store.notifyError(e); });
    }, commitDebounce, [resource, store]), 1), saveResource = _f[0];
    /**
     * Validates the value. If it fails, it calls the function in the second
     * Argument. Pass `undefined` to remove existing value.
     */
    var validateAndSet = useCallback(function (newVal) { return __awaiter(_this, void 0, void 0, function () {
        var e_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (newVal === undefined) {
                        // remove the value
                        resource.remove(propertyURL);
                        set(undefined);
                        saveResource();
                        return [2 /*return*/];
                    }
                    set(newVal);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, resource.set(propertyURL, newVal, validate)];
                case 2:
                    _a.sent();
                    saveResource();
                    handleValidationError === null || handleValidationError === void 0 ? void 0 : handleValidationError(undefined);
                    return [3 /*break*/, 4];
                case 3:
                    e_3 = _a.sent();
                    if (handleValidationError) {
                        handleValidationError(e_3);
                    }
                    else {
                        store.notifyError(e_3);
                    }
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); }, [resource, handleValidationError, store, validate, saveResource]);
    // Update value when resource changes.
    if (resource !== prevResourceReference) {
        try {
            set(resource.get(propertyURL));
        }
        catch (e) {
            store.notifyError(e);
        }
        setPrevResourceReference(resource);
    }
    useEffect(function () {
        return resource.on(ResourceEvents.LocalChange, function (prop, value) {
            if (prop === propertyURL) {
                set(value);
            }
        });
    }, [resource, propertyURL]);
    return [val, validateAndSet];
}
/**
 * Hook for getting and setting a stringified representation of an Atom in a
 * React component. See {@link useValue}
 */
export function useString(resource, propertyURL, opts) {
    var _a = __read(useValue(resource, propertyURL, opts), 2), val = _a[0], setVal = _a[1];
    if (typeof val === 'string') {
        return [val, setVal];
    }
    if (val === undefined) {
        return [undefined, setVal];
    }
    return [valToString(val), setVal];
}
export var noNestedSupport = 'error:no_support_for_editing_nested_resources_yet';
/**
 * Hook for getting and setting a Subject. Converts Nested resources into paths.
 * See {@link useValue} for more info on using the `set` functionality.
 */
export function useSubject(resource, propertyURL, opts) {
    var _a = __read(useValue(resource, propertyURL, opts), 2), val = _a[0], setVal = _a[1];
    if (!val) {
        return [undefined, setVal];
    }
    if (typeof val === 'string') {
        return [val, setVal];
    }
    else {
        // It's a nested resource
        // TODO: Implement support for this. Get the subject from the Resource, or construct te Path.
        return [noNestedSupport, setVal];
    }
}
var titleHookOpts = {
    commit: true,
};
/**
 * Returns the most fitting title / name for a Resource. This is either the
 * Name, Shortname, Filename or truncated Subject URL of that resource.
 */
export function useTitle(resource, truncateLength, opts) {
    if (truncateLength === void 0) { truncateLength = 40; }
    if (opts === void 0) { opts = titleHookOpts; }
    var _a = __read(useString(resource, urls.properties.name, opts), 2), name = _a[0], setName = _a[1];
    var _b = __read(useString(resource, urls.properties.shortname, opts), 2), shortname = _b[0], setShortname = _b[1];
    var _c = __read(useString(resource, urls.properties.file.filename, opts), 2), filename = _c[0], setFileName = _c[1];
    if (resource.loading) {
        return ['...', setName];
    }
    if (name !== undefined) {
        return [name, setName];
    }
    if (shortname !== undefined) {
        return [shortname, setShortname];
    }
    if (filename !== undefined) {
        return [filename, setFileName];
    }
    var subject = resource === null || resource === void 0 ? void 0 : resource.getSubject();
    if (typeof subject === 'string' && subject.length > 0) {
        return [truncateUrl(subject, truncateLength), setName];
    }
    return [subject, setName];
}
/**
 * Hook for getting all URLs for some array. Returns the current Array (defaults
 * to empty array) and a callback for validation errors. See {@link useValue}
 */
export function useArray(resource, propertyURL, opts) {
    var _a = __read(useValue(resource, propertyURL, opts), 2), value = _a[0], set = _a[1];
    var stableEmptyResourceArray = useRef([]);
    var values = useMemo(function () {
        if (value === undefined) {
            return stableEmptyResourceArray.current;
        }
        try {
            // This cast isn't entirely correct - we should add a `useSubjects` hook.
            // https://github.com/atomicdata-dev/atomic-data-browser/issues/219
            return valToArray(value);
        }
        catch (e) {
            console.error(e, value, propertyURL, resource.subject);
            // If .toArray() errors, return an empty array. Useful in forms when datatypes haves changed!
            // https://github.com/atomicdata-dev/atomic-data-browser/issues/85
            return stableEmptyResourceArray.current;
        }
    }, [value, resource, propertyURL]);
    var push = useCallback(function (val) {
        resource.push(propertyURL, val);
        if (opts === null || opts === void 0 ? void 0 : opts.commit) {
            resource.save();
        }
    }, [resource, propertyURL]);
    return [values, set, push];
}
/** See {@link useValue} */
export function useNumber(resource, propertyURL, opts) {
    var _a = __read(useValue(resource, propertyURL, opts), 2), value = _a[0], set = _a[1];
    if (value === undefined) {
        return [undefined, set];
    }
    return [valToNumber(value), set];
}
/** Returns false if there is no value for this propertyURL. See {@link useValue} */
export function useBoolean(resource, propertyURL, opts) {
    var _a = __read(useValue(resource, propertyURL, opts), 2), value = _a[0], set = _a[1];
    useEffect(function () {
        if (value === undefined) {
            set(false);
        }
    }, [value, set]);
    if (value === undefined) {
        return [false, set];
    }
    return [valToBoolean(value), set];
}
/**
 * Hook for getting a stringified representation of an Atom in a React
 * component. See {@link useValue}
 */
export function useDate(resource, propertyURL, opts) {
    var store = useStore();
    var _a = __read(useValue(resource, propertyURL, opts), 1), value = _a[0];
    if (value === undefined) {
        return undefined;
    }
    try {
        return valToDate(value);
    }
    catch (e) {
        store.notifyError(e);
        return;
    }
}
/** Preferred way of using the store in a Component or Hook */
export function useStore() {
    var store = useContext(StoreContext);
    if (store === undefined) {
        throw new Error('Store is not found in react context. Have you wrapped your application in `<StoreContext.Provider value={new Store}>`?');
    }
    return store;
}
/**
 * Checks if the Agent has the appropriate rights to edit this resource. If you
 * don't explicitly pass an Agent URL, it will select the current Agent set by the store.
 */
export function useCanWrite(resource, agent) {
    var store = useStore();
    var _a = __read(useState(false), 2), canWrite = _a[0], setCanWrite = _a[1];
    var _b = __read(useState(undefined), 2), msg = _b[0], setMsg = _b[1];
    var agentStore = store.getAgent();
    // If the subject changes, make sure to change the resource!
    useEffect(function () {
        if (agent === undefined) {
            agent = agentStore === null || agentStore === void 0 ? void 0 : agentStore.subject;
        }
        if (agent === undefined) {
            setMsg('No Agent set');
            setCanWrite(false);
            return;
        }
        if (resource.new) {
            setCanWrite(true);
            setMsg(undefined);
            return;
        }
        setMsg('Checking write rights...');
        function tryCanWrite() {
            return __awaiter(this, void 0, void 0, function () {
                var _a, canWriteAsync, canWriteMsg;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, resource.canWrite(agent)];
                        case 1:
                            _a = __read.apply(void 0, [_b.sent(), 2]), canWriteAsync = _a[0], canWriteMsg = _a[1];
                            setCanWrite(canWriteAsync);
                            if (canWriteAsync) {
                                setMsg(undefined);
                            }
                            else {
                                setMsg(("You don't have write rights in this resource or its parents: " +
                                    canWriteMsg));
                            }
                            return [2 /*return*/];
                    }
                });
            });
        }
        tryCanWrite();
    }, [resource, agent, agentStore === null || agentStore === void 0 ? void 0 : agentStore.subject]);
    return [canWrite, msg];
}
/**
 * The context must be provided by wrapping a high level React element in
 * `<StoreContext.Provider value={new Store}>My App</StoreContext.Provider>`
 */
export var StoreContext = createContext(new Store());
//# sourceMappingURL=hooks.js.map