var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { useCallback, useEffect, useState } from 'react';
var listeners = new Map();
/**
 * Hook for storing information to LocalStorage. Note that if you use this same
 * hook in multiple component instances, these will *not* share state! If you
 * want that behavior, you should use this hook inside a Context object.
 */
export function useLocalStorage(key, initialValue) {
    // State to store our value
    // Pass initial state function to useState so logic is only executed once
    var _a = __read(useState(function () {
        try {
            // Get from local storage by key
            var item = window.localStorage.getItem(key);
            if (item === 'undefined') {
                return initialValue;
            }
            // Parse stored json or if none return initialValue
            return item ? JSON.parse(item) : initialValue;
        }
        catch (error) {
            // If error also return initialValue
            console.error("Error finding ".concat(key, " in localStorage:"), error);
            return initialValue;
        }
    }), 2), storedValue = _a[0], setStoredValue = _a[1];
    // Return a wrapped version of useState's setter function that
    // persists the new value to localStorage.
    var setValue = useCallback(function (value) {
        var e_1, _a;
        try {
            // Allow value to be a function so we have same API as useState
            var valueToStore = value instanceof Function ? value(storedValue) : value;
            try {
                // Save state
                for (var _b = __values(listeners.get(key) || []), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var listener = _c.value;
                    listener(valueToStore);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // Save to local storage
            window.localStorage.setItem(key, JSON.stringify(valueToStore));
        }
        catch (error) {
            // A more advanced implementation would handle the error case
            console.error(error);
        }
    }, [storedValue, key]);
    useEffect(function () {
        var _a;
        if (!listeners.has(key)) {
            listeners.set(key, new Set());
        }
        (_a = listeners.get(key)) === null || _a === void 0 ? void 0 : _a.add(setStoredValue);
        return function () {
            var _a;
            (_a = listeners.get(key)) === null || _a === void 0 ? void 0 : _a.delete(setStoredValue);
        };
    }, [key]);
    return [storedValue, setValue];
}
//# sourceMappingURL=useLocalStorage.js.map