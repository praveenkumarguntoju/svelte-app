var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { Client, StoreEvents } from '@tomic/lib';
import { useCallback, useEffect, useState } from 'react';
import { useStore } from './index.js';
/**
 * A hook for using and adjusting the Server URL. Also saves to localStorage. If
 * the URL is wrong, an error is thrown using the store's handler
 */
export var useServerURL = function () {
    // Localstorage for cross-session persistence of JSON object
    var store = useStore();
    var _a = __read(useState(store.getServerUrl()), 2), serverUrl = _a[0], setServerUrl = _a[1];
    var set = useCallback(function (value) {
        if (!value) {
            return;
        }
        var newValue = 'https://atomicdata.dev';
        if (Client.isValidSubject(value)) {
            newValue = value;
        }
        else {
            store.notifyError(new Error("Invalid Server URL: ".concat(value, ", defaulting to atomicdata.dev")));
        }
        store.setServerUrl(newValue);
    }, [store]);
    useEffect(function () {
        return store.on(StoreEvents.ServerURLChanged, setServerUrl);
    }, [store]);
    return [serverUrl, set];
};
//# sourceMappingURL=useServerURL.js.map